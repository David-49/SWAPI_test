import <%= name.charAt(0).toUpperCase() + name.slice(1) %>Model from "../models/<%= name %>Model.js";

const get<%= name.charAt(0).toUpperCase() + name.slice(1) %>s = (req, res) => {
    <%= name.charAt(0).toUpperCase() + name.slice(1) %>Model.find((err, <%= name %>s) => {
        res.json(<%= name %>s);
    });
};

const getOne<%= name.charAt(0).toUpperCase() + name.slice(1) %> = (req, res) => {
    <%= name.charAt(0).toUpperCase() + name.slice(1) %>Model.findById(req.params.id, (err, <%= name %>) => {
        if (!<%= name %>) res.status(404).send("<%= name.charAt(0).toUpperCase() + name.slice(1) %> not found");
        res.json(<%= name %>);
    });
};

const updateOne<%= name.charAt(0).toUpperCase() + name.slice(1) %> = async (req, res) => {
    try {
        const updateFields = {};

        for (const property in req.body) {
            updateFields[`fields.${property}`] = req.body[property];
        }

        const updated<%= name.charAt(0).toUpperCase() + name.slice(1) %> = await <%= name.charAt(0).toUpperCase() + name.slice(1) %>Model.findByIdAndUpdate(
            { _id: req.params.id },
            { $set: updateFields },
            { new: true, runValidators: true }
        );

        if (!updated<%= name.charAt(0).toUpperCase() + name.slice(1) %>) res.status(404).send("<%= name.charAt(0).toUpperCase() + name.slice(1) %> not found");
        res.json({ message: "<%= name.charAt(0).toUpperCase() + name.slice(1) %> updated successfully", updated<%= name.charAt(0).toUpperCase() + name.slice(1) %> });
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

const createOne<%= name.charAt(0).toUpperCase() + name.slice(1) %> = async (req, res) => {
    try {
        const new<%= name.charAt(0).toUpperCase() + name.slice(1) %> = new <%= name.charAt(0).toUpperCase() + name.slice(1) %>Model({
            fields: req.body,
            model: "resources.<%= name %>",
        });
        const saved<%= name.charAt(0).toUpperCase() + name.slice(1) %> = await new<%= name.charAt(0).toUpperCase() + name.slice(1) %>.save();

        res.status(201).json({ message: "<%= name.charAt(0).toUpperCase() + name.slice(1) %> created successfully", saved<%= name.charAt(0).toUpperCase() + name.slice(1) %> });
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

const deleteOne<%= name.charAt(0).toUpperCase() + name.slice(1) %> = async (req, res) => {
    try {
        const deleted<%= name.charAt(0).toUpperCase() + name.slice(1) %> = await <%= name.charAt(0).toUpperCase() + name.slice(1) %>Model.deleteOne({ _id: req.params.id });
        res.json({ message: `ID ${req.params.id} deleted`, deleted<%= name.charAt(0).toUpperCase() + name.slice(1) %> });
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

export { get<%= name.charAt(0).toUpperCase() + name.slice(1) %>s, getOne<%= name.charAt(0).toUpperCase() + name.slice(1) %>, updateOne<%= name.charAt(0).toUpperCase() + name.slice(1) %>, createOne<%= name.charAt(0).toUpperCase() + name.slice(1) %>, deleteOne<%= name.charAt(0).toUpperCase() + name.slice(1) %> };
